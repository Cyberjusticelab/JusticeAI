Archive of old code we might implement in future generations

# Mihai test stuff
# Dictionary to list converter

def dicttolist(dictionnaire):
    liste = []
    tempo = []
    newElementCheck = 0
    for key, value in dictionnaire.iteritems():
        newElementKey = key
        newElementValue = value
        tempo.extend(newElementKey)
        tempo.extend(newElementValue)
        tempo.extend(newElementCheck)
        liste.append(tempo)
        newElementKey = None
        newElementValue = None
        tempo[:] = []


# Model of every list of category: category = [fact, fact, fact, etc.] fact = [fact question, checked, value]
# Questions for lease termination
lease_term_type = ['Is there a specified end date to your lease?', False, None],
has_lease_expired = ['Has the lease expired already?', False, None],
is_tenant_dead = ['Is the tenant dead?', False, None],
is_student = ['Are you a student?', False, None],
is_habitable = ['How would you describe your dwelling? Is it habitable?', False, None]

# Questions for rent change (excluding lease_term_type)
is_rent_in_lease = ['Is the rent specified in the lease?', False, None]
rent_in_lease_amount = ['What is the amount of the rent', False, None]

# Question for nonpayment - obviously not both in_default and over_three_weeks will be asked
in_default = ""  # If you entered this category, you are automatically in default
over_three_weeks = ["How long has it been since you haven't paid?", False, None]
has_abandoned = ['Have you seen your tenant?', False, None]
interest_allowed = ''  # Not relevant for questioning
interest_term = ''  # Not relevant for questioning
interest_max = ''  # Not relevant for questioning

# Question for deposits
is_rent_advance = ['Has the rent been asked to be paid in advance?', False, None]
first_month_rent_paid = ['Is it only for the first month?', False, None]

# 1st part of the program
category = "lease_termination"  # Instantiate with the value of the category key
questionstoask = []


def initializeQuestions(category):
    if "lease_termination" in category:
        questionstoask.append(lease_term_type)
        questionstoask.append(has_lease_expired)
        questionstoask.append(is_tenant_dead)
        questionstoask.append(is_habitable)
    if "rent_change" in category:
        questionstoask.append(is_rent_in_lease, rent_in_lease_amount)
    if "nonpayment" in category:
        questionstoask.append(over_three_weeks, has_abandoned)
    if "deposits" in category:
        questionstoask.append(is_rent_advance, first_month_rent_paid)


# Run this everytime we get back an input from the user
def askQuestion():
    for facts in questionstoask:
        for x in facts:
            # if list is false (unchecked) or if the value wasn't instantiated, ask the question
            if x[1] is False:
                #  Dependency checker
                if canIAsk(x) is True:
                    # This will be replaced with the proper message
                    print(x[0])


# This will regulate what can be asked and what cannot be asked by dependency but will NOT regulate fact values changing
# Facts will uniquely be changed as a whole by the nlp_service without regulation or discrimination

def canIAsk(facts):
    # Write dependencies here for lease termination
    print(questionstoask[0][0][2])
    if "lease_termination" in category and facts in questionstoask:
        # Rule #1 cannot ask when it ends if it's indeterminate or the question about the type is not asked yet
        if "indeterminate" in (questionstoask[0][0][2]):
            return False
        else:
            return True
            # Write dependencies here for rent change
    elif "rent_change" in category and facts in questionstoask:
        # Rule #1 cannot ask what the rent in lease amount is if the rent is not in the lease
        if (questionstoask[1])[1] is False and facts in questionstoask:
            return False
        else:
            return True
            # Write dependencies here for nonpayment
    elif "nonpayment" in category and facts in questionstoask:
        return True
    # Write dependencies here for deposits
    elif "deposits" in category and facts in questionstoask:
        return True
    else:
        return True


initializeQuestions(category)
print(questionstoask)
askQuestion()